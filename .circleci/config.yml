version: 2.1
orbs:
  slack: circleci/slack@5.2.3
  kubernetes: circleci/kubernetes@1.3.1
jobs:
  ensure_formatting:
    docker:
      - image: cimg/python:3.13
    working_directory: ~/repo
    steps:
      - checkout
      - run: sudo apt-get update -qq && sudo apt install curl gettext-base
      - run:
          name: install dependencies
          command: pip install black isort --user
      - run:
          name: confirm black version
          command: black --version
      - run:
          name: run isort check
          command: isort --profile black --check .
      - run:
          name: run black check
          command: black --check .
      - slack/notify:
          event: fail
          template: basic_fail_1
  linter:
    docker:
      - image: alpine/flake8
    working_directory: ~/repo
    steps:
      - checkout
      - run: apk update && apk upgrade && apk --no-cache add curl gettext bash
      - run:
          name: flake8
          command: flake8 --ignore=E,W ~/repo
      - slack/notify:
          event: fail
          template: basic_fail_1
  test:
    working_directory: ~/openaev
    docker:
      - image: cimg/python:3.13
    steps:
      - checkout
      - setup_remote_docker
      - run: # this is only to satisfy poetry; not used
          working_directory: ~/
          name: Clone pyoaev
          command: |
            if [ "${CIRCLE_BRANCH}" = "main" ]; then
              git clone -b main https://github.com/OpenAEV-Platform/client-python
            else
              git clone -b release/current https://github.com/OpenAEV-Platform/client-python
            fi
      - run:
          working_directory: ~/openaev/nuclei
          name: Install poetry
          command: pip install poetry==2.1.3 && poetry config installer.re-resolve false
      - run:
          working_directory: ~/openaev/nuclei
          name: Install dependencies for nuclei injector
          command: |
            poetry install --extras prod
      - run:
          working_directory: ~/openaev/nuclei
          name: Overwrite pyoaev with correct version from CI
          command: |
            if [ "${CIRCLE_BRANCH}" = "main" ]; then
              poetry run pip install --force-reinstall git+https://github.com/OpenAEV-Platform/client-python.git@main
            else
              poetry run pip install --force-reinstall git+https://github.com/OpenAEV-Platform/client-python.git@release/current
            fi
      - run:
          working_directory: ~/openaev/nuclei
          name: Tests for nuclei injector
          command: poetry run python -m unittest
  build_docker_images:
    working_directory: ~/openaev
    docker:
      - image: cimg/base:current-24.04
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install environment
          command: |
            sudo apt-get update -qq
            sudo apt install curl gettext-base
            mkdir -p ~/openaev/images
      - run:
          working_directory: ~/openaev
          name: Replace pyoaev requirement of stable version with latest release branch code
          # We safely expand the CIRCLE_BRANCH variable because the CircleCI filters already enforce a strict release/x.x.x pattern using regex
          command: |
            if [ "${CIRCLE_BRANCH}" = "main" ]; then
              find . -name pyproject.toml | xargs -I ___ sed "s|branch = 'release/current'|branch = '${CIRCLE_BRANCH}'|" -i ___;
            fi;
      - run:
          working_directory: ~/openaev/aws
          name: Build Docker image openaev/injector-aws
          command: |
            if [ "${CIRCLE_BRANCH}" = "release/current" ]; then
              docker build --progress=plain -t openaev/injector-aws:${CIRCLE_SHA1} --build-arg PYOAEV_GIT_BRANCH_OVERRIDE="${CIRCLE_BRANCH}" .
            else
              docker build --progress=plain -t openaev/injector-aws:${CIRCLE_SHA1} .
            fi
            docker save -o ~/openaev/images/injector-aws openaev/injector-aws:${CIRCLE_SHA1}
      - run:
          working_directory: ~/openaev/http-query
          name: Build Docker image openaev/injector-http-query
          command: |
            if [ "${CIRCLE_BRANCH}" = "release/current" ]; then
              docker build --progress=plain -t openaev/injector-http-query:${CIRCLE_SHA1} --build-arg PYOAEV_GIT_BRANCH_OVERRIDE="${CIRCLE_BRANCH}" .
            else
              docker build --progress=plain -t openaev/injector-http-query:${CIRCLE_SHA1} .
            fi
            docker save -o ~/openaev/images/injector-http-query openaev/injector-http-query:${CIRCLE_SHA1}
      - run:
          working_directory: ~/openaev/nmap
          name: Build Docker image openaev/injector-nmap
          command: |
            if [ "${CIRCLE_BRANCH}" = "release/current" ]; then
              docker build --progress=plain --build-context injector_common=../injector_common -t openaev/injector-nmap:${CIRCLE_SHA1} --build-arg PYOAEV_GIT_BRANCH_OVERRIDE="${CIRCLE_BRANCH}" .
            else
              docker build --progress=plain --build-context injector_common=../injector_common -t openaev/injector-nmap:${CIRCLE_SHA1} .
            fi
            docker save -o ~/openaev/images/injector-nmap openaev/injector-nmap:${CIRCLE_SHA1}
      - run:
          working_directory: ~/openaev/nuclei
          name: Build Docker image openaev/injector-nuclei
          command: |
            if [ "${CIRCLE_BRANCH}" = "release/current" ]; then
              docker build --progress=plain --build-context injector_common=../injector_common -t openaev/injector-nuclei:${CIRCLE_SHA1} --build-arg PYOAEV_GIT_BRANCH_OVERRIDE="${CIRCLE_BRANCH}" .
            else
              docker build --progress=plain --build-context injector_common=../injector_common -t openaev/injector-nuclei:${CIRCLE_SHA1} .
            fi
            docker save -o ~/openaev/images/injector-nuclei openaev/injector-nuclei:${CIRCLE_SHA1}
      - persist_to_workspace:
          root: ~/openaev
          paths:
            - images
      - slack/notify:
          event: fail
          template: basic_fail_1
  publish_images:
    working_directory: ~/openaev
    docker:
      - image: cimg/base:current-24.04
    steps:
      - checkout
      - run:
          working_directory: ~/openaev
          name: Set semantic version environment
          command: |
            export LATEST_SEMANTIC_VERSION=$(git tag --sort=-v:refname | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
            export IS_LATEST=$([ "$CIRCLE_TAG" = "$LATEST_SEMANTIC_VERSION" ] && echo "true" || echo "false")
            echo "IS_LATEST=$IS_LATEST" >> $BASH_ENV
      - attach_workspace:
          at: .
      - setup_remote_docker
      - run:
          working_directory: ~/openaev/images
          name: Restore saved images and publish
          command: |
            if [ "${CIRCLE_TAG}" != "" ]
            then
              export IMAGETAG=${CIRCLE_TAG}
            elif [ "${CIRCLE_BRANCH}" = "main" ]
            then
              export IMAGETAG="rolling"
            elif [ "${CIRCLE_BRANCH}" = "release/current" ]
            then
              export IMAGETAG="prerelease"
            else
              echo "No tag supplied or branch is neither 'main' nor 'release/current' (was: '${CIRCLE_BRANCH}')"
              exit 1
            fi
            echo "Image tag: ${IMAGETAG}"

            docker image load < injector-aws
            docker tag openaev/injector-aws:${CIRCLE_SHA1} openaev/injector-aws:${IMAGETAG}
            docker tag openaev/injector-aws:${CIRCLE_SHA1} openbas/injector-aws:${IMAGETAG}
            docker image load < injector-http-query
            docker tag openaev/injector-http-query:${CIRCLE_SHA1} openaev/injector-http-query:${IMAGETAG}
            docker tag openaev/injector-http-query:${CIRCLE_SHA1} openbas/injector-http-query:${IMAGETAG}
            docker image load < injector-nmap
            docker tag openaev/injector-nmap:${CIRCLE_SHA1} openaev/injector-nmap:${IMAGETAG}
            docker tag openaev/injector-nmap:${CIRCLE_SHA1} openbas/injector-nmap:${IMAGETAG}
            docker image load < injector-nuclei
            docker tag openaev/injector-nuclei:${CIRCLE_SHA1} openaev/injector-nuclei:${IMAGETAG}
            docker tag openaev/injector-nuclei:${CIRCLE_SHA1} openbas/injector-nuclei:${IMAGETAG}

            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            # docker push openaev/injector-aws:${IMAGETAG}
            docker push openbas/injector-aws:${IMAGETAG}
            # docker push openaev/injector-http-query:${IMAGETAG}
            docker push openbas/injector-http-query:${IMAGETAG}
            # docker push openaev/injector-nmap:${IMAGETAG}
            docker push openbas/injector-nmap:${IMAGETAG}
            # docker push openaev/injector-nuclei:${IMAGETAG}
            docker push openbas/injector-nuclei:${IMAGETAG}

            if [ "${IS_LATEST}" == "true" ]
            then
              docker tag openaev/injector-aws:${IMAGETAG} openaev/injector-aws:latest
              docker tag openaev/injector-aws:${IMAGETAG} openbas/injector-aws:latest
              docker tag openaev/injector-http-query:${IMAGETAG} openaev/injector-http-query:latest
              docker tag openaev/injector-http-query:${IMAGETAG} openbas/injector-http-query:latest
              docker tag openaev/injector-nmap:${IMAGETAG} openaev/injector-nmap:latest
              docker tag openaev/injector-nmap:${IMAGETAG} openbas/injector-nmap:latest
              docker tag openaev/injector-nuclei:${IMAGETAG} openaev/injector-nuclei:latest
              docker tag openaev/injector-nuclei:${IMAGETAG} openbas/injector-nuclei:latest

              docker push openaev/injector-aws:latest
              docker push openbas/injector-aws:latest
              docker push openaev/injector-http-query:latest
              docker push openbas/injector-http-query:latest
              docker push openaev/injector-nmap:latest
              docker push openbas/injector-nmap:latest
              docker push openaev/injector-nuclei:latest
              docker push openbas/injector-nuclei:latest
            fi
      - slack/notify:
          event: fail
          template: basic_fail_1
  deploy_testing:
    docker:
      - image: cimg/base:current-24.04
    steps:
      - checkout
      - kubernetes/install-kubectl
      - run: kubectl --server=https://api.staging.eu-west.filigran.io --token=$K8S_TOKEN -n customer-testing-oaev rollout restart deployment -l app=injector
  deploy_prerelease:
    docker:
      - image: cimg/base:current-24.04
    steps:
      - checkout
      - kubernetes/install-kubectl
      - run: kubectl --server=https://api.staging.eu-west.filigran.io --token=$K8S_TOKEN_PRE_RELEASE -n customer-prerelease-oaev rollout restart deployment -l app=injector
  notify_rolling:
    docker:
      - image: cimg/base:current-24.04
    steps:
      - run: sudo apt-get update -qq && sudo apt install curl gettext-base
      - slack/notify:
          event: pass
          template: basic_success_1
  notify:
    docker:
      - image: cimg/base:current-24.04
    steps:
      - run: sudo apt-get update -qq && sudo apt install curl gettext-base
      - slack/notify:
          event: pass
          template: basic_success_1
workflows:
  version: 2
  openaev:
    jobs:
      - ensure_formatting:
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
      - linter:
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
      - test:
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
      - build_docker_images:
          requires:
            - ensure_formatting
            - linter
            - test
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
      - publish_images:
          requires:
            - build_docker_images
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
            branches:
              only:
                - main
                - release/current
      - deploy_testing:
          requires:
            - publish_images
          filters:
            branches:
              only: main
      - deploy_prerelease:
          requires:
            - publish_images
          filters:
            branches:
              only: release/current
      - notify_rolling:
          requires:
            - deploy_testing
            - deploy_prerelease
      - notify:
          requires:
            - publish_images
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
            branches:
              ignore: /.*/
