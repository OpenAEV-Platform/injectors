version: 2.1
orbs:
  slack: circleci/slack@5.2.0
  kubernetes: circleci/kubernetes@1.3.1
jobs:
  ensure_formatting:
    docker:
      - image: cimg/python:3.13
    working_directory: ~/repo
    steps:
      - checkout
      - run: sudo apt-get update -qq && sudo apt install curl gettext-base
      - run:
          name: install dependencies
          command: pip install black isort --user
      - run:
          name: confirm black version
          command: black --version
      - run:
          name: run isort check
          command: isort --profile black --check .
      - run:
          name: run black check
          command: black --check .
      - slack/notify:
          event: fail
          template: basic_fail_1
  linter:
    docker:
      - image: alpine/flake8
    working_directory: ~/repo
    steps:
      - checkout
      - run: apk update && apk upgrade && apk --no-cache add curl gettext bash
      - run:
          name: flake8
          command: flake8 --ignore=E,W ~/repo
      - slack/notify:
          event: fail
          template: basic_fail_1
  test:
    working_directory: ~/openaev
    docker:
      - image: cimg/python:3.13
    steps:
      - checkout
      - setup_remote_docker
      - run:
          working_directory: ~/openaev/nuclei
          name: Install dependencies for nuclei injector
          command: pip install -r requirements.txt
      - run:
          working_directory: ~/openaev/nuclei
          name: Overwrite pyoaev with correct version from CI
          command: |
            if [ "${CIRCLE_BRANCH}" = "release/current" ]; then
              pip install --force-reinstall git+https://github.com/OpenAEV-Platform/client-python.git@release/current
            else
              pip install --force-reinstall git+https://github.com/OpenAEV-Platform/client-python.git@main
            fi
      - run:
          working_directory: ~/openaev/nuclei
          name: Tests for nuclei injector
          command: python -m unittest
  build_1:
    working_directory: ~/openaev
    docker:
      - image: cimg/base:stable-20.04
    environment:
      LATEST_SEMANTIC_VERSION: $(git tag --sort=-v:refname | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
      IS_LATEST: $([ "$CIRCLE_TAG" = "$LATEST_SEMANTIC_VERSION" ] && echo "true" || echo "false")
    steps:
      - checkout
      - setup_remote_docker
      - run: sudo apt-get update -qq && sudo apt install curl gettext-base
      - run:
          working_directory: ~/openaev/http-query
          name: Build Docker image openbas/injector-http-query
          command: |
            TAGS="-t openbas/injector-http-query:${CIRCLE_TAG} -t openaev/injector-http-query:${CIRCLE_TAG}"
            $IS_LATEST && TAGS="$TAGS -t openbas/injector-http-query:latest"
            docker build --progress=plain $TAGS .
      - run:
          working_directory: ~/openaev/nmap
          name: Build Docker image openbas/injector-nmap
          command: |
            TAGS="-t openbas/injector-nmap:${CIRCLE_TAG} -t openaev/injector-nmap:${CIRCLE_TAG}"
            $IS_LATEST && TAGS="$TAGS -t openbas/injector-nmap:latest"
            docker build --progress=plain --build-context injector_common=../injector_common $TAGS .
      - run:
          working_directory: ~/openaev/nuclei
          name: Build Docker image openbas/injector-nuclei
          command: |
            TAGS="-t openbas/injector-nuclei:${CIRCLE_TAG} -t openaev/injector-nuclei:${CIRCLE_TAG}"
            $IS_LATEST && TAGS="$TAGS -t openbas/injector-nuclei:latest"
            docker build --progress=plain --build-context injector_common=../injector_common $TAGS .
      - run:
          working_directory: ~/openaev/aws
          name: Build Docker image openbas/injector-aws
          command: |
            TAGS="-t openbas/injector-aws:${CIRCLE_TAG} -t openaev/injector-aws:${CIRCLE_TAG}"
            $IS_LATEST && TAGS="$TAGS -t openbas/injector-aws:latest"
            docker build --progress=plain $TAGS .
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            $IS_LATEST && docker push openbas/injector-http-query:latest
            docker push openbas/injector-http-query:${CIRCLE_TAG}
            docker push openaev/injector-http-query:${CIRCLE_TAG}
            $IS_LATEST && docker push openbas/injector-nmap:latest
            docker push openbas/injector-nmap:${CIRCLE_TAG}
            docker push openaev/injector-nmap:${CIRCLE_TAG}
            $IS_LATEST && docker push openbas/injector-nuclei:latest
            docker push openbas/injector-nuclei:${CIRCLE_TAG}
            docker push openaev/injector-nuclei:${CIRCLE_TAG}
            $IS_LATEST && docker push openbas/injector-aws:latest
            docker push openbas/injector-aws:${CIRCLE_TAG}
            docker push openaev/injector-aws:${CIRCLE_TAG}
      - slack/notify:
          event: fail
          template: basic_fail_1

  build_rolling_1:
    working_directory: ~/openaev
    docker:
      - image: cimg/base:stable-20.04
    steps:
      - checkout
      - setup_remote_docker
      - run: sudo apt-get update -qq && sudo apt install curl gettext-base
      - run:
          working_directory: ~/openaev
          name: Replace pyoaev requirement of stable version with latest main branch code
          command: find . -name requirements.txt -exec sed 's|^pyoaev==.*$|pyoaev @ git+https://github.com/OpenAEV-Platform/client-python@main|' -i {} \;
      - run:
          working_directory: ~/openaev/http-query
          name: Build Docker image openaev/injector-http-query
          command: docker build --progress=plain -t openbas/injector-http-query:rolling -t openaev/injector-http-query:rolling .
      - run:
          working_directory: ~/openaev/nmap
          name: Build Docker image openaev/injector-nmap
          command: docker build --progress=plain --build-context injector_common=../injector_common -t openbas/injector-nmap:rolling -t openaev/injector-nmap:rolling .
      - run:
          working_directory: ~/openaev/nuclei
          name: Build Docker image openaev/injector-nuclei
          command: docker build --progress=plain --build-context injector_common=../injector_common -t openbas/injector-nuclei:rolling -t openaev/injector-nuclei:rolling .
      - run:
          working_directory: ~/openaev/aws
          name: Build Docker image openaev/injector-aws
          command: docker build --progress=plain -t openbas/injector-aws:rolling -t openaev/injector-aws:rolling .
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push openbas/injector-http-query:rolling
            docker push openaev/injector-http-query:rolling 
            docker push openbas/injector-nmap:rolling
            docker push openaev/injector-nmap:rolling
            docker push openbas/injector-nuclei:rolling
            docker push openaev/injector-nuclei:rolling
            docker push openbas/injector-aws:rolling
            docker push openaev/injector-aws:rolling
      - slack/notify:
          event: fail
          template: basic_fail_1
  build_prerelease_1:
    working_directory: ~/openaev
    docker:
      - image: cimg/base:stable-20.04
    steps:
      - checkout
      - setup_remote_docker
      - run: sudo apt-get update -qq && sudo apt install curl gettext-base
      - run:
          working_directory: ~/openaev
          name: Replace pyoaev requirement of stable version with latest release branch code
          # We safely expand the CIRCLE_BRANCH variable because the CircleCI filters already enforce a strict release/x.x.x pattern using regex
          command: find . -name requirements.txt -exec sed "s|^pyoaev==.*$|pyoaev @ git+https://github.com/OpenAEV-Platform/client-python@${CIRCLE_BRANCH}|" -i {} \;
      - run:
          working_directory: ~/openaev/http-query
          name: Build Docker image openaev/injector-http-query
          command: docker build --progress=plain -t openbas/injector-http-query:prerelease -t openaev/injector-http-query:prerelease .
      - run:
          working_directory: ~/openaev/nmap
          name: Build Docker image openaev/injector-nmap
          command: docker build --progress=plain --build-context injector_common=../injector_common -t openbas/injector-nmap:prerelease -t openaev/injector-nmap:prerelease .
      - run:
          working_directory: ~/openaev/nuclei
          name: Build Docker image openaev/injector-nuclei
          command: docker build --progress=plain --build-context injector_common=../injector_common -t openbas/injector-nuclei:prerelease -t openaev/injector-nuclei:prerelease .
      - run:
          working_directory: ~/openaev/aws
          name: Build Docker image openaev/injector-aws
          command: docker build --progress=plain -t openbas/injector-aws:prerelease -t openaev/injector-aws:prerelease .
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push openbas/injector-http-query:prerelease
            docker push openaev/injector-http-query:prerelease
            docker push openbas/injector-nmap:prerelease
            docker push openaev/injector-nmap:prerelease
            docker push openbas/injector-nuclei:prerelease
            docker push openaev/injector-nuclei:prerelease
            docker push openbas/injector-aws:prerelease
            docker push openaev/injector-aws:prerelease
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy_testing:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - kubernetes/install-kubectl
      - run: kubectl --server=https://api.staging.eu-west.filigran.io --token=$K8S_TOKEN -n customer-testing-oaev rollout restart deployment -l app=injector
  deploy_prerelease:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - kubernetes/install-kubectl
      - run: kubectl --server=https://api.staging.eu-west.filigran.io --token=$K8S_TOKEN_PRE_RELEASE -n customer-prerelease-oaev rollout restart deployment -l app=injector
  notify_rolling:
    docker:
      - image: "cimg/base:stable"
    steps:
      - run: sudo apt-get update -qq && sudo apt install curl gettext-base
      - slack/notify:
          event: pass
          template: basic_success_1
  notify:
    docker:
      - image: "cimg/base:stable"
    steps:
      - run: sudo apt-get update -qq && sudo apt install curl gettext-base
      - slack/notify:
          event: pass
          template: basic_success_1
workflows:
  version: 2
  openaev:
    jobs:
      - ensure_formatting
      - linter
      - test
      - build_1:
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
            branches:
              ignore: /.*/
      - build_rolling_1:
          requires:
            - ensure_formatting
            - linter
            - test
          filters:
            branches:
              only:
                - main
      - build_prerelease_1:
          requires:
            - ensure_formatting
            - linter
            - test
          filters:
            branches:
              only:
                - release/current
      - deploy_testing:
          requires:
            - build_rolling_1
      - deploy_prerelease:
          requires:
            - build_prerelease_1
      - notify_rolling:
          requires:
            - deploy_testing
            - deploy_prerelease
      - notify:
          requires:
            - build_1
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
            branches:
              ignore: /.*/
